trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'
pr:
  - '*'


variables:
  isGitTag: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]
  gitTag: $[replace(variables['Build.SourceBranch'], 'refs/tags/', '')]

stages:
  - stage: Build
    jobs:
      - job: build_benchmark_ubuntu
        displayName: Benchmarks
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            sudo apt update -qq
            sudo apt install -qq -y build-essential g++ ninja-build wget
            wget https://github.com/jcelerier/cninja/releases/download/v3.7.2/cninja-v3.7.2-Linux.tar.gz
            tar xaf cninja-*-Linux.tar.gz
            rm *.tar.gz

          displayName: Dependencies

        - bash: |
            echo $(variables.gitTag)
            cd $(System.DefaultWorkingDirectory)

            git clone https://github.com/google/benchmark
            git clone https://github.com/google/googletest.git benchmark/googletest
            (
              cd benchmark/
              mkdir build
              cd build/
              cmake -GNinja .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=inst -DBUILD_SHARED_LIBS=OFF
              ninja
              ninja install
            )

            (
              ./cninja $(Build.SourcesDirectory) static minimal benchmarks -- -DCMAKE_PREFIX_PATH=$PWD/benchmark/build/inst
              mv build-* build
            )

          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/tests/ossia_DeviceBenchmark
            artifactName: libossia-device-bench

      - job: ubuntu_RunBenchmarks_selfhosted
        dependsOn: build_benchmark_ubuntu
        pool:
          name: Default
          demands:
            - agent.os -equals Linux
            - StabilizerServer
        steps:
        - checkout: none
        - script: curl http://$(StabilizerServer):7373/acquire # On stabilise la machine
          displayName: 'Tune system performance'

        - download: current
          artifact: libossia-device-bench

        - script: |
            apt update -qq
            apt install -qq libbenchmark-dev libbenchmark-tools
            cp -rf /azp/agent/_work/1/libossia-device-bench/* .
            mkdir results
            chmod +x ossia_DeviceBenchmark
            ./ossia_DeviceBenchmark
          env:
            BENCHMARK_BENCHMARK_FORMAT: 'json'
            BENCHMARK_BENCHMARK_OUT: 'results/benchmarks-results.json'
            BENCHMARK_FORMAT: 'json'
            BENCHMARK_OUT: 'results/benchmarks-results.json'
          displayName: 'Run benchmarks'

        - publish: results
          artifact: benchResults_selfhosted

        - script:  curl http://$(StabilizerServer):7373/release
          condition: always()
          displayName: 'Reset system performance'

      - job: Unity3DLinux
        displayName: Unity3D (Linux)
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            sudo apt update -qq
            sudo apt install -qq -y build-essential g++ ninja-build libavahi-client-dev
          displayName: Dependencies

        - bash: |
            echo $(variables.gitTag)
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-linux

      - job: Unity3DMac
        displayName: Unity3D (macOS)
        pool:
          vmImage: 'macos-10.15'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            brew install ninja
          displayName: Dependencies

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install

            # Setup codesigning
            # Thanks https://www.update.rocks/blog/osx-signing-with-travis/
            (
              set +x
              KEY_CHAIN=build.keychain
              echo "$MAC_CERT_B64" | base64 --decode > ossia-cert.p12

              security create-keychain -p azure $KEY_CHAIN
              security default-keychain -s $KEY_CHAIN
              security unlock-keychain -p azure $KEY_CHAIN
              security import ossia-cert.p12 -k $KEY_CHAIN -P "$MAC_CERT_PASSWORD" -T /usr/bin/codesign;
              security set-key-partition-list -S apple-tool:,apple: -s -k azure $KEY_CHAIN

              rm -rf *.p12
            )

            security unlock-keychain -p azure build.keychain

            (
              cd install
              codesign --force --timestamp --sign "ossia.io" ossia-unity/Assets/Plugins/ossia.bundle

              zip ossia-unity.zip ossia-unity/Assets/Plugins/ossia.bundle
              xcrun altool \
                   --notarize-app \
                   -t osx \
                   -f "ossia-unity.zip" \
                   --primary-bundle-id "io.ossia.ossia-unity" \
                   -u jeanmichael.celerier@gmail.com -p "@env:MAC_ALTOOL_PASSWORD"
            )

          displayName: Build
          env:
            MAC_CERT_B64: $(MAC_CERT_B64)
            MAC_CERT_PASSWORD: $(MAC_CERT_PASSWORD)
            MAC_ALTOOL_PASSWORD: $(MAC_ALTOOL_PASSWORD)

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-macos

      - job: Unity3DWin32
        displayName: Unity3D (Win32)
        pool:
          vmImage: 'windows-2019'

        steps:
        - checkout: self
          submodules: true

        - script: |
            cinst -y ninja

        - script: |
            pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
            for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
            popd
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64

            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DCMAKE_CXX_COMPILER="cl.exe" -DCMAKE_C_COMPILER="cl.exe" -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_SYSTEM_VERSION=7 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-win32

      - job: JavaLinux
        displayName: Java (Linux)
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            sudo apt update -qq
            sudo apt install -qq -y build-essential g++ ninja-build openjdk-8-jdk-headless libavahi-client-dev
          displayName: Dependencies

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DJAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 -DOSSIA_JAVA_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-java-linux

      - job: JavaMac
        displayName: Java (macOS)
        pool:
          vmImage: 'macos-10.15'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            brew install ninja
            brew cask install adoptopenjdk/openjdk/adoptopenjdk8
          displayName: Dependencies

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
            echo "JAVA_HOME: $JAVA_HOME"
            cmake -GNinja $(Build.SourcesDirectory) -DJAVA_HOME=$JAVA_HOME -DOSSIA_JAVA_ONLY=1 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install

            # Setup codesigning
            # Thanks https://www.update.rocks/blog/osx-signing-with-travis/
            (
              set +x
              KEY_CHAIN=build.keychain
              echo "$MAC_CERT_B64" | base64 --decode > ossia-cert.p12

              security create-keychain -p azure $KEY_CHAIN
              security default-keychain -s $KEY_CHAIN
              security unlock-keychain -p azure $KEY_CHAIN
              security import ossia-cert.p12 -k $KEY_CHAIN -P "$MAC_CERT_PASSWORD" -T /usr/bin/codesign;
              security set-key-partition-list -S apple-tool:,apple: -s -k azure $KEY_CHAIN

              rm -rf *.p12
            )

            security unlock-keychain -p azure build.keychain

            (
              cd install
              unzip ossia-java.jar
              codesign --force --timestamp --sign "ossia.io" darwin/*
              rm ossia-java.jar
              zip -r ossia-java.jar META-INF io darwin
              cp ossia-java.jar ossia-java.zip
              xcrun altool \
                   --notarize-app \
                   -t osx \
                   -f "ossia-java.zip" \
                   --primary-bundle-id "io.ossia.ossia-java" \
                   -u jeanmichael.celerier@gmail.com -p "@env:MAC_ALTOOL_PASSWORD"
            )

          displayName: Build
          env:
            MAC_CERT_B64: $(MAC_CERT_B64)
            MAC_CERT_PASSWORD: $(MAC_CERT_PASSWORD)
            MAC_ALTOOL_PASSWORD: $(MAC_ALTOOL_PASSWORD)

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-java-macos

      - job: JavaWin32
        displayName: Java (Win32)
        pool:
          vmImage: 'windows-2019'

        steps:
        - checkout: self
          submodules: true

        - script: |
            cinst -y ninja
            cinst -y jdk8

        - script: |
            pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
            for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
            popd
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64

            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DJAVA_HOME="c:\Program Files\Java\jdk1.8.0_211" -DCMAKE_CXX_COMPILER="cl.exe" -DCMAKE_C_COMPILER="cl.exe" -DCMAKE_SYSTEM_VERSION=7 -DOSSIA_JAVA_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-java-win32

  - stage: Assemble
    condition: and(succeeded(), eq(variables.isGitTag, true))

    jobs:
      - job: Unity3D
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: none
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-win32
            path: $(System.DefaultWorkingDirectory)/unity3d-win32
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-macos
            path: $(System.DefaultWorkingDirectory)/unity3d-macos
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-linux
            path: $(System.DefaultWorkingDirectory)/unity3d-linux

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir -p ./unity3d-linux/ossia-unity/Assets/Plugins/x86_64/
            cp -rf ./unity3d-macos/ossia-unity/Assets/Plugins/ossia.bundle ./unity3d-linux/ossia-unity/Assets/Plugins/x86_64/
            cp -rf ./unity3d-win32/ossia-unity/Assets/Plugins/x86_64/ossia.dll ./unity3d-linux/ossia-unity/Assets/Plugins/x86_64/

            pushd ./unity3d-linux/ossia-unity/
            zip -r ossia-unity3d.zip *

            mv ossia-unity3d.zip $(System.DefaultWorkingDirectory)/ossia-unity3d.zip
            popd
          displayName: Package

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/ossia-unity3d.zip
            artifactName: ossia-unity3d

        - task: GitHubRelease@1
          inputs:
            gitHubConnection: github.com_jcelerier
            repositoryName: ossia/libossia
            action: 'edit'
            target: '$(Build.SourceVersion)'
            tagSource: 'gitTag'
            tag: '$(gitTag)'
            assetUploadMode: 'replace'
            assets: $(System.DefaultWorkingDirectory)/ossia-unity3d.zip

      - job: Java
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-java-win32
            path: $(System.DefaultWorkingDirectory)/java-win32
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-java-macos
            path: $(System.DefaultWorkingDirectory)/java-macos
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-java-linux
            path: $(System.DefaultWorkingDirectory)/java-linux

        - bash: |
            cd $(System.DefaultWorkingDirectory)

            pushd java-macos
            unzip -n ossia-java.jar
            popd

            pushd java-win32
            unzip -n ossia-java.jar
            mv win32-x86-64/ossia_x64.dll win32-x86-64/ossia.dll
            popd

            pushd java-linux
            cp -rf ../java-macos/darwin .
            cp -rf ../java-win32/win32-x86-64 .            
            
            unzip -n ossia-java.jar
            rm ossia-java.jar
            zip -r ossia-java.jar darwin win32-x86-64 linux-x86-64 io META-INF
            zip -r ossia-java.zip ossia-java.jar jna.jar

            mv ossia-java.zip $(System.DefaultWorkingDirectory)/ossia-java.zip
            popd
          displayName: Package

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/ossia-java.zip
            artifactName: ossia-java

        - task: GitHubRelease@1
          inputs:
            gitHubConnection: github.com_jcelerier
            repositoryName: ossia/libossia
            action: 'edit'
            target: '$(Build.SourceVersion)'
            tagSource: 'gitTag'
            tag: '$(gitTag)'
            assetUploadMode: 'replace'
            assets: $(System.DefaultWorkingDirectory)/ossia-java.zip
